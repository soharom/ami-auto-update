AWSTemplateFormatVersion: '2010-09-09'

Description: This template creates a VPC with two public and private subnets, a load balancer,
  an autoscaling group with a target tracking policy , ec2 instances running Apache Web Server, and related resources. 
  You will be billed for the AWS resources used if you create a stack from this template.

Parameters:
  VPCCIDR:
    Default: 10.0.0.0/16
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

  VPCPubSub1CIDR:
    Default: 10.0.1.0/24
    Description: Please enter the IP range (CIDR notation) for the public subnet 1
    Type: String

  VPCPubSub2CIDR:
    Default: 10.0.2.0/24
    Description: Please enter the IP range (CIDR notation) for the public subnet 2
    Type: String

  VPCPriSub1CIDR:
    Default: 10.0.3.0/24
    Description: Please enter the IP range (CIDR notation) for the private subnet 1
    Type: String

  VPCPriSub2CIDR:
    Default: 10.0.4.0/24
    Description: Please enter the IP range (CIDR notation) for the private subnet 2
    Type: String

  CPUPolicyTargetValue:
    Default: 80
    Description: Please enter the target CPU utilization
    Type: String

  LaunchTemplateVersionNumber:
    Default: 1
    Type: String

  AMIID:
    Default: ami-0f9fc25dd2506cf6d
    Type: String
    Description: Please enter the AMI ID

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: MyVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  #Create Public Subnets
  VPCPubSub1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref VPCPubSub1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PubSub1
      VpcId: !Ref VPC

  VPCPubSub2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref VPCPubSub2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PubSub2
      VpcId: !Ref VPC

  #Create Route Table
  VPCPubRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PubRT:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref VPCPubRT

  #Create NAT Gateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref VPCPubSub1

  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  #Create Private Subnets
  VPCPriSub1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref VPCPriSub1CIDR
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC

  VPCPriSub2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref VPCPriSub2CIDR
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC

  #Create Private Route Table
  VPCPriRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PriRT:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref VPCPriRT

  #Associate Subnets
  VPCPubSub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCPubRT
      SubnetId: !Ref VPCPubSub1

  VPCPubSub2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCPubRT
      SubnetId: !Ref VPCPubSub2

  VPCPriSub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCPriRT
      SubnetId: !Ref VPCPriSub1

  VPCPriSub2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCPriRT
      SubnetId: !Ref VPCPriSub2

#Create LoadBalancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref VPCPubSub1
        - !Ref VPCPubSub2

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPC


#Create Load Balancer Security Group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

#Create Web Security Group
  WebSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open HTTP (port 80) 
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  #Create Instance Profile
  ssmEc2instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Ref ssmEc2Role
      Roles:
        - !Ref ssmEc2Role

  #Create Instance Role
  ssmEc2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      RoleName: SSMManagedInstanceRole
      Description: Allows EC2 instances to call AWS services like CloudWatch and
        Systems Manager on your behalf
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  #Create Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: amiLambdaRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaLoggingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Automation-UpdateSsmParam:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Automation-UpdateSsmParam:*'
        - PolicyName: SSMParameterStorePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:PutParameter'
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/latestAmi'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeImages'
                  - 'ssm:DescribeParameters'
                Resource: '*'
#Lambda Function to update SSM parameter
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Code:
        ZipFile: |  
          from __future__ import print_function

          import json
          import boto3

          print('Loading function')


          #Updates an SSM parameter
          #Expects parameterName, parameterValue
          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))

              # get SSM client
              client = boto3.client('ssm')

              #confirm  parameter exists before updating it
              response = client.describe_parameters(
                Filters=[
                    {
                    'Key': 'Name',
                    'Values': [ event['parameterName'] ]
                    },
                  ]
              )

              if not response['Parameters']:
                  print('No such parameter')
                  return 'SSM parameter not found.'

              #if parameter has a Description field, update it PLUS the Value
              if 'Description' in response['Parameters'][0]:
                  description = response['Parameters'][0]['Description']
                  
                  response = client.put_parameter(
                    Name=event['parameterName'],
                    Value=event['parameterValue'],
                    Description=description,
                    Type='String',
                    Overwrite=True
                  )
              
              #otherwise just update Value
              else:
                  response = client.put_parameter(
                    Name=event['parameterName'],
                    Value=event['parameterValue'],
                    Type='String',
                    Overwrite=True
                  )
                  
              responseString = 'Updated parameter %s with value %s.' % (event['parameterName'], event['parameterValue'])
                  
              return responseString        
  #Create Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: ParameterStore
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-for-auto-scaling
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref ssmEc2instanceProfile
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !Ref WebSG
            DeleteOnTermination: true
        Placement:
          Tenancy: default
        ImageId: "resolve:ssm:latestAmi"
        InstanceType: t2.micro
        BlockDeviceMappings:
         - DeviceName: /dev/xvda
           Ebs:
             Encrypted: true
             VolumeSize: 8
             VolumeType: gp2
        UserData: !Base64 |
          #!/bin/bash
          yum update -y
          yum install httpd -y
          systemctl start httpd
          systemctl enable httpd
          amazon-linux-extras install epel -y
          yum install stress -y

  #Create AutoScaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: '2'
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !Ref LaunchTemplateVersionNumber
      VPCZoneIdentifier:
        - !Ref VPCPriSub1
        - !Ref VPCPriSub2
      TargetGroupARNs:
        - !Ref TargetGroup

  #AutoScaling Group Tracking Policy
  myCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CPUPolicyTargetValue

  ParameterStore:
    Type: AWS::SSM::Parameter
    Properties:
      Name: latestAmi
      Type: String
      DataType: "aws:ec2:image"
      Value: !Ref AMIID
      Description: The latest AMI ID
  AutomationRUNBook:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        description: Systems Manager Automation Demo - Patch AMI and Update ASG
        schemaVersion: '0.3'
        assumeRole: '{{ AutomationAssumeRole }}'
        parameters:
          AutomationAssumeRole:
            type: String
            description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses your IAM permissions to execute this document.
            default: ''
          SourceAMI:
            type: String
            description: The ID of the AMI you want to patch.
            default: '{{ ssm:latestAmi }}'
          SubnetId:
            type: String
            description: The ID of the subnet where the instance from the SourceAMI parameter is launched.
          SecurityGroupIds:
            type: StringList
            description: The IDs of the security groups to associate with the instance that's launched from the SourceAMI parameter.
          NewAMI:
            type: String
            description: The name of of newly patched AMI.
            default: patchedAMI-{{global:DATE_TIME}}
          InstanceProfile:
            type: String
            description: The name of the IAM instance profile you want the source instance to use.
          SnapshotId:
            type: String
            description: (Optional) The snapshot ID to use to retrieve a patch baseline snapshot.
            default: ''
          RebootOption:
            type: String
            description: (Optional) Reboot behavior after a patch Install operation. If you choose NoReboot and patches are installed, the instance is marked as non-compliant until a subsequent reboot and scan.
            allowedValues:
              - NoReboot
              - RebootIfNeeded
            default: RebootIfNeeded
          Operation:
            type: String
            description: (Optional) The update or configuration to perform on the instance. The system checks if patches specified in the patch baseline are installed on the instance. The install operation installs patches missing from the baseline.
            allowedValues:
              - Install
              - Scan
            default: Install
        mainSteps:
          - name: startInstances
            action: aws:runInstances
            maxAttempts: 1
            timeoutSeconds: 1200
            nextStep: verifyInstanceManaged
            isEnd: false
            onFailure: Abort
            inputs:
              ImageId: '{{ SourceAMI }}'
              InstanceType: t2.micro
              MinInstanceCount: 1
              MaxInstanceCount: 1
              IamInstanceProfileName: '{{ InstanceProfile }}'
              SubnetId: '{{ SubnetId }}'
              SecurityGroupIds: '{{ SecurityGroupIds }}'
          - name: verifyInstanceManaged
            action: aws:waitForAwsResourceProperty
            timeoutSeconds: 600
            nextStep: installPatches
            isEnd: false
            onFailure: step:terminateInstance
            inputs:
              Service: ssm
              Api: DescribeInstanceInformation
              InstanceInformationFilterList:
                - key: InstanceIds
                  valueSet:
                    - '{{ startInstances.InstanceIds }}'
              PropertySelector: $.InstanceInformationList[0].PingStatus
              DesiredValues:
                - Online
          - name: installPatches
            action: aws:runCommand
            timeoutSeconds: 7200
            nextStep: stopInstance
            isEnd: false
            onFailure: step:terminateInstance
            inputs:
              DocumentName: AWS-RunPatchBaseline
              Parameters:
                SnapshotId: '{{SnapshotId}}'
                RebootOption: '{{RebootOption}}'
                Operation: '{{Operation}}'
              InstanceIds:
                - '{{ startInstances.InstanceIds }}'
          - name: stopInstance
            action: aws:changeInstanceState
            maxAttempts: 1
            nextStep: createImage
            isEnd: false
            onCancel: Abort
            onFailure: step:terminateInstance
            inputs:
              InstanceIds:
                - '{{ startInstances.InstanceIds }}'
              DesiredState: stopped
          - name: createImage
            action: aws:createImage
            maxAttempts: 1
            nextStep: terminateInstance
            isEnd: false
            onFailure: step:terminateInstance
            inputs:
              InstanceId: '{{ startInstances.InstanceIds }}'
              ImageName: '{{ NewAMI }}'
              NoReboot: false
              ImageDescription: Patched AMI created by Automation
          - name: terminateInstance
            action: aws:changeInstanceState
            maxAttempts: 1
            nextStep: InvokeLambdaFunction
            isEnd: false
            onFailure: Abort
            inputs:
              InstanceIds:
                - '{{ startInstances.InstanceIds }}'
              DesiredState: terminated
          - name: InvokeLambdaFunction
            action: aws:invokeLambdaFunction
            isEnd: true
            inputs:
              FunctionName: UpdateSSMParameter
              Payload: '{"parameterName":"latestAmi", "parameterValue":"{{createImage.ImageId}}"}'
        outputs:
          - createImage.ImageId